- name: Include GitHub token variables
  include_vars:
    file: secrets.yml
  no_log: true

- name: Ensure Git is installed (Debian/Ubuntu)
  apt:
    name: git
    state: present
  when: ansible_os_family == "Debian"

- name: Ensure GPG is installed
  package:
    name: gnupg
    state: present

- name: Ensure ~/.ssh directory exists
  file:
    path: "{{ ansible_user_dir }}/.ssh"
    state: directory
    mode: '0700'

- name: Ensure ~/.gnupg directory exists
  file:
    path: "{{ ansible_user_dir }}/.gnupg"
    state: directory
    mode: '0700'

- name: Copy existing SSH key (if provided)
  copy:
    src: "{{ ssh_private_key_file }}"
    dest: "{{ ansible_user_dir }}/.ssh/id_rsa"
    mode: '0600'
  when: ssh_private_key_file != ""

- name: Copy existing SSH public key (if provided)
  copy:
    src: "{{ ssh_public_key_file }}"
    dest: "{{ ansible_user_dir }}/.ssh/id_rsa.pub"
    mode: '0644'
  when: ssh_public_key_file != ""

- name: Generate a new SSH key (if not provided)
  openssh_keypair:
    path: "{{ ansible_user_dir }}/.ssh/id_rsa"
    type: rsa
    size: 4096
  when: ssh_private_key_file == ""
  
- name: Read SSH public key
  slurp:
    src: "{{ ansible_user_dir }}/.ssh/id_rsa.pub"
  register: ssh_public_key_content

- name: Add SSH key to GitHub
  uri:
    url: "https://api.github.com/user/keys"
    method: POST
    headers:
      Authorization: "Bearer {{ github_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      title: "Ansible_{{ ansible_hostname }}_Key"
      key: "{{ ssh_public_key_content['content'] | b64decode }}"
    status_code: 201
  when: github_token is defined and github_token != ""

- name: Copy existing GPG key (if provided)
  rpm_key:
    key: "{{ lookup('file', gpg_private_key_file) }}"
    state: present
  when: gpg_private_key_file != ""

- name: Generate a new GPG key (if not provided)
  block:
    - name: Generate GPG key parameters file
      copy:
        dest: /tmp/gpg_key_params
        content: |
          %no-protection
          Key-Type: default
          Key-Length: 4096
          Subkey-Type: default
          Subkey-Length: 4096
          Name-Real: {{ git_user_name }}
          Name-Email: {{ git_user_email }}
          Expire-Date: 0
          %commit
      when: gpg_private_key_file == ""

    - name: Generate GPG key
      command: |
        gpg --batch --generate-key /tmp/gpg_key_params
      args:
        creates: "{{ ansible_user_dir }}/.gnupg/secring.gpg"
      environment:
        GNUPGHOME: "{{ ansible_user_dir }}/.gnupg"
      when: gpg_private_key_file == ""

    - name: List GPG secret keys
      command: gpg --list-secret-keys --keyid-format=long
      register: gpg_keys_list
      changed_when: false
      environment:
        GNUPGHOME: "{{ ansible_user_dir }}/.gnupg"

    - name: Parse GPG keys and extract key IDs
      set_fact:
        git_signing_key_id: "{{ (gpg_keys_list.stdout | regex_search('sec\\s+\\w+\/(\\w{16})', '\\1')).0 }}"

- name: Export GPG public key
  command: >
    gpg --armor --export {{ git_signing_key_id }}
  register: gpg_public_key_output
  changed_when: false
  environment:
    GNUPGHOME: "{{ ansible_user_dir }}/.gnupg"

- name: Add GPG key to GitHub
  uri:
    url: "https://api.github.com/user/gpg_keys"
    method: POST
    headers:
      Authorization: "Bearer {{ github_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      armored_public_key: "{{ gpg_public_key_output.stdout }}"
    status_code: 201
  when: github_token is defined and github_token != ""

- name: Configure Git user.name
  git_config:
    name: user.name
    scope: global
    value: "{{ git_user_name }}"

- name: Configure Git user.email
  git_config:
    name: user.email
    scope: global
    value: "{{ git_user_email }}"

- name: Configure Git core.editor
  git_config:
    name: core.editor
    scope: global
    value: "{{ git_core_editor }}"

- name: Configure Git signing key (if available)
  git_config:
    name: user.signingkey
    scope: global
    value: "{{ git_signing_key_id }}"
  when: git_signing_key_id is defined and git_signing_key_id != ""

- name: Configure Git to sign commits by default
  git_config:
    name: commit.gpgsign
    scope: global
    value: true
